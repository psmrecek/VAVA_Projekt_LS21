/*
 * VAVA project
 * Esport League by Martin Schön and Peter Smreček
 * FIIT STU, 2021
 */
package sk.stu.fiit.gui.league;

import java.text.ParseException;
import sk.stu.fiit.gui.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import sk.stu.fiit.data.InputProcessor;
import sk.stu.fiit.data.Lists;
import sk.stu.fiit.league.League;
import sk.stu.fiit.league.Match;
import sk.stu.fiit.team.Team;
import sk.stu.fiit.user.LeagueOrganizer;

/**
 *
 * @author PeterSmrecek
 */
public class MatchWindow extends javax.swing.JFrame {

    /**
     * Creates new form Template
     */
    
    private final Logger logger = Logger.getLogger(MatchWindow.class.getName());
    private MainGui mainGui;
    private Lists lists;
    private LeagueOrganizer leagueOrganizer;
    private ArrayList<League> organizersLeagues;
    private ArrayList<String> organizersLeaguesStrings = new ArrayList<>();
    private League selectedLeague = null;
    private ArrayList<Team> selectedLeagueTeams;
    private final List<JTextField> tfInfoList;
    
    public MatchWindow(MainGui mainGui, Lists lists, LeagueOrganizer leagueOrganizer) {
        initComponents();
        
        this.tfInfoList = Arrays.asList(nameTf, gameTf, currentTeamsTf, maxTeamsTf, teamsInMatchTf, dateStartTf, dateEndTf);
        
        this.mainGui = mainGui;
        this.lists = lists;
        this.leagueOrganizer = leagueOrganizer;
        
        organizersLeagues = leagueOrganizer.getLeagueList();
        for (League organizersLeague : organizersLeagues) {
            organizersLeaguesStrings.add(organizersLeague.getName());
        }
        
        leaguesCb.setModel(new javax.swing.DefaultComboBoxModel<>(organizersLeaguesStrings.toArray(new String[0])));
        
        newMatchRb.setEnabled(false);
        resultsRb.setEnabled(false);
        matchDateTf.setEditable(false);
        matchTypeTf.setEditable(false);
        matchLinkTf.setEditable(false);
        matchWinnerTf.setEditable(false);
        matchResultTf.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bg1Bg = new javax.swing.ButtonGroup();
        mainPnl = new javax.swing.JPanel();
        leagueChooserPnl = new javax.swing.JPanel();
        l8Lbl = new javax.swing.JLabel();
        leaguesCb = new javax.swing.JComboBox<>();
        selectLeagueBtn = new javax.swing.JButton();
        teamsScroll = new javax.swing.JScrollPane();
        teamsTbl = new javax.swing.JTable();
        titleLbl = new javax.swing.JLabel();
        infoPnl = new javax.swing.JPanel();
        l3Lbl = new javax.swing.JLabel();
        l6Lbl = new javax.swing.JLabel();
        l4Lbl = new javax.swing.JLabel();
        l7Lbl = new javax.swing.JLabel();
        dateStartTf = new javax.swing.JTextField();
        l1Lbl = new javax.swing.JLabel();
        dateEndTf = new javax.swing.JTextField();
        teamsInMatchTf = new javax.swing.JTextField();
        gameTf = new javax.swing.JTextField();
        maxTeamsTf = new javax.swing.JTextField();
        nameTf = new javax.swing.JTextField();
        l5Lbl = new javax.swing.JLabel();
        currentTeamsTf = new javax.swing.JTextField();
        l2Lbl = new javax.swing.JLabel();
        matchesScroll = new javax.swing.JScrollPane();
        matchesTbl = new javax.swing.JTable();
        infoPnl1 = new javax.swing.JPanel();
        matchWinnerLbl = new javax.swing.JLabel();
        matchResultLbl = new javax.swing.JLabel();
        l9Lbl = new javax.swing.JLabel();
        resultsRb = new javax.swing.JRadioButton();
        matchDateLbl = new javax.swing.JLabel();
        newMatchRb = new javax.swing.JRadioButton();
        matchTypeTf = new javax.swing.JTextField();
        matchResultTf = new javax.swing.JTextField();
        matchDateTf = new javax.swing.JTextField();
        matchWinnerTf = new javax.swing.JTextField();
        matchTypeLbl = new javax.swing.JLabel();
        controlsPnl = new javax.swing.JPanel();
        createMatchBtn = new javax.swing.JButton();
        resultsBtn = new javax.swing.JButton();
        matchTypeLbl1 = new javax.swing.JLabel();
        matchLinkTf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manažment zápasov");

        java.awt.GridBagLayout mainPnlLayout = new java.awt.GridBagLayout();
        mainPnlLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        mainPnlLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        mainPnl.setLayout(mainPnlLayout);

        leagueChooserPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Liga", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        java.awt.GridBagLayout leagueChooserPnlLayout = new java.awt.GridBagLayout();
        leagueChooserPnlLayout.columnWidths = new int[] {0, 5, 0, 5, 0};
        leagueChooserPnlLayout.rowHeights = new int[] {0};
        leagueChooserPnl.setLayout(leagueChooserPnlLayout);

        l8Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l8Lbl.setText("Výber ligy");
        l8Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l8Lbl.setPreferredSize(new java.awt.Dimension(200, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        leagueChooserPnl.add(l8Lbl, gridBagConstraints);

        leaguesCb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        leaguesCb.setMinimumSize(new java.awt.Dimension(200, 26));
        leaguesCb.setPreferredSize(new java.awt.Dimension(300, 29));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        leagueChooserPnl.add(leaguesCb, gridBagConstraints);

        selectLeagueBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        selectLeagueBtn.setText("Zvoliť ligu");
        selectLeagueBtn.setPreferredSize(new java.awt.Dimension(200, 29));
        selectLeagueBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                selectLeagueBtnMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        leagueChooserPnl.add(selectLeagueBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPnl.add(leagueChooserPnl, gridBagConstraints);

        teamsScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tímy v lige", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        teamsScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        teamsScroll.setPreferredSize(new java.awt.Dimension(462, 200));

        teamsTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        teamsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Meno tímu", "Výber"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        teamsTbl.getTableHeader().setReorderingAllowed(false);
        teamsScroll.setViewportView(teamsTbl);
        if (teamsTbl.getColumnModel().getColumnCount() > 0) {
            teamsTbl.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPnl.add(teamsScroll, gridBagConstraints);

        titleLbl.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        titleLbl.setText("Manažment zápasov");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipady = 20;
        mainPnl.add(titleLbl, gridBagConstraints);

        infoPnl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informácie o lige", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        java.awt.GridBagLayout infoPnlLayout = new java.awt.GridBagLayout();
        infoPnlLayout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        infoPnlLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        infoPnl.setLayout(infoPnlLayout);

        l3Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l3Lbl.setText("Aktuálny počet tímov v lige");
        l3Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l3Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        infoPnl.add(l3Lbl, gridBagConstraints);

        l6Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l6Lbl.setText("Dátum začiatku ligy");
        l6Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l6Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        infoPnl.add(l6Lbl, gridBagConstraints);

        l4Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l4Lbl.setText("Maximálny počet tímov v lige");
        l4Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l4Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        infoPnl.add(l4Lbl, gridBagConstraints);

        l7Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l7Lbl.setText("Dátum konca ligy");
        l7Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l7Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        infoPnl.add(l7Lbl, gridBagConstraints);

        dateStartTf.setEditable(false);
        dateStartTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateStartTf.setMinimumSize(new java.awt.Dimension(200, 26));
        dateStartTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        infoPnl.add(dateStartTf, gridBagConstraints);

        l1Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l1Lbl.setText("Názov ligy");
        l1Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l1Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        infoPnl.add(l1Lbl, gridBagConstraints);

        dateEndTf.setEditable(false);
        dateEndTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateEndTf.setMinimumSize(new java.awt.Dimension(200, 26));
        dateEndTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        infoPnl.add(dateEndTf, gridBagConstraints);

        teamsInMatchTf.setEditable(false);
        teamsInMatchTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        teamsInMatchTf.setMinimumSize(new java.awt.Dimension(200, 26));
        teamsInMatchTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        infoPnl.add(teamsInMatchTf, gridBagConstraints);

        gameTf.setEditable(false);
        gameTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        gameTf.setMinimumSize(new java.awt.Dimension(200, 26));
        gameTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        infoPnl.add(gameTf, gridBagConstraints);

        maxTeamsTf.setEditable(false);
        maxTeamsTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        maxTeamsTf.setMinimumSize(new java.awt.Dimension(200, 26));
        maxTeamsTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        infoPnl.add(maxTeamsTf, gridBagConstraints);

        nameTf.setEditable(false);
        nameTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        nameTf.setMinimumSize(new java.awt.Dimension(200, 26));
        nameTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        infoPnl.add(nameTf, gridBagConstraints);

        l5Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l5Lbl.setText("Počet tímov v zápase");
        l5Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l5Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        infoPnl.add(l5Lbl, gridBagConstraints);

        currentTeamsTf.setEditable(false);
        currentTeamsTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentTeamsTf.setMinimumSize(new java.awt.Dimension(200, 26));
        currentTeamsTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        infoPnl.add(currentTeamsTf, gridBagConstraints);

        l2Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l2Lbl.setText("Hra");
        l2Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l2Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        infoPnl.add(l2Lbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPnl.add(infoPnl, gridBagConstraints);

        matchesScroll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Zápasy v lige", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        matchesScroll.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchesScroll.setPreferredSize(new java.awt.Dimension(462, 200));

        matchesTbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchesTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dátum", "Typ", "Tímy", "Víťaz", "Výsledok"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        matchesTbl.getTableHeader().setReorderingAllowed(false);
        matchesScroll.setViewportView(matchesTbl);
        if (matchesTbl.getColumnModel().getColumnCount() > 0) {
            matchesTbl.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        mainPnl.add(matchesScroll, gridBagConstraints);

        infoPnl1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informácie", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N
        java.awt.GridBagLayout infoPnl1Layout = new java.awt.GridBagLayout();
        infoPnl1Layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        infoPnl1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        infoPnl1.setLayout(infoPnl1Layout);

        matchWinnerLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchWinnerLbl.setText("Víťaz");
        matchWinnerLbl.setMinimumSize(new java.awt.Dimension(200, 26));
        matchWinnerLbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        infoPnl1.add(matchWinnerLbl, gridBagConstraints);

        matchResultLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchResultLbl.setText("Výsledok");
        matchResultLbl.setMinimumSize(new java.awt.Dimension(200, 26));
        matchResultLbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        infoPnl1.add(matchResultLbl, gridBagConstraints);

        l9Lbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        l9Lbl.setText("Možnosti");
        l9Lbl.setMinimumSize(new java.awt.Dimension(200, 26));
        l9Lbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        infoPnl1.add(l9Lbl, gridBagConstraints);

        bg1Bg.add(resultsRb);
        resultsRb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        resultsRb.setText("Zaznamenať výsledok");
        resultsRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultsRbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        infoPnl1.add(resultsRb, gridBagConstraints);

        matchDateLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchDateLbl.setText("Dátum");
        matchDateLbl.setMinimumSize(new java.awt.Dimension(200, 26));
        matchDateLbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        infoPnl1.add(matchDateLbl, gridBagConstraints);

        bg1Bg.add(newMatchRb);
        newMatchRb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        newMatchRb.setSelected(true);
        newMatchRb.setText("Nový zápas");
        newMatchRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMatchRbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        infoPnl1.add(newMatchRb, gridBagConstraints);

        matchTypeTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchTypeTf.setMinimumSize(new java.awt.Dimension(200, 26));
        matchTypeTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        infoPnl1.add(matchTypeTf, gridBagConstraints);

        matchResultTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchResultTf.setMinimumSize(new java.awt.Dimension(200, 26));
        matchResultTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        infoPnl1.add(matchResultTf, gridBagConstraints);

        matchDateTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchDateTf.setMinimumSize(new java.awt.Dimension(200, 26));
        matchDateTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        infoPnl1.add(matchDateTf, gridBagConstraints);

        matchWinnerTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchWinnerTf.setMinimumSize(new java.awt.Dimension(200, 26));
        matchWinnerTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        infoPnl1.add(matchWinnerTf, gridBagConstraints);

        matchTypeLbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchTypeLbl.setText("Typ");
        matchTypeLbl.setMinimumSize(new java.awt.Dimension(200, 26));
        matchTypeLbl.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        infoPnl1.add(matchTypeLbl, gridBagConstraints);

        controlsPnl.setLayout(new javax.swing.BoxLayout(controlsPnl, javax.swing.BoxLayout.LINE_AXIS));

        createMatchBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        createMatchBtn.setText("Vytvoriť");
        createMatchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                createMatchBtnMouseReleased(evt);
            }
        });
        controlsPnl.add(createMatchBtn);

        resultsBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        resultsBtn.setText("Zaznamenať");
        resultsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultsBtnMouseReleased(evt);
            }
        });
        controlsPnl.add(resultsBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        infoPnl1.add(controlsPnl, gridBagConstraints);

        matchTypeLbl1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchTypeLbl1.setText("Link");
        matchTypeLbl1.setMinimumSize(new java.awt.Dimension(200, 26));
        matchTypeLbl1.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        infoPnl1.add(matchTypeLbl1, gridBagConstraints);

        matchLinkTf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        matchLinkTf.setMinimumSize(new java.awt.Dimension(200, 26));
        matchLinkTf.setPreferredSize(new java.awt.Dimension(200, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        infoPnl1.add(matchLinkTf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        mainPnl.add(infoPnl1, gridBagConstraints);
        infoPnl1.getAccessibleContext().setAccessibleName("Plánovanie zápasu");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 1161, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPnl, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createMatchBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createMatchBtnMouseReleased
        // TODO add your handling code here:
        createMatchAction();
    }//GEN-LAST:event_createMatchBtnMouseReleased

    private void resultsBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsBtnMouseReleased
        // TODO add your handling code here:
        resultsBtnAction();
    }//GEN-LAST:event_resultsBtnMouseReleased

    private void selectLeagueBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectLeagueBtnMouseReleased
        // TODO add your handling code here:
        selectLeagueAction();
    }//GEN-LAST:event_selectLeagueBtnMouseReleased

    private void resultsRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultsRbActionPerformed
        // TODO add your handling code here:
        resultsAction();
    }//GEN-LAST:event_resultsRbActionPerformed

    private void newMatchRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMatchRbActionPerformed
        // TODO add your handling code here:
        newMatchAction();
    }//GEN-LAST:event_newMatchRbActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg1Bg;
    private javax.swing.JPanel controlsPnl;
    private javax.swing.JButton createMatchBtn;
    private javax.swing.JTextField currentTeamsTf;
    private javax.swing.JTextField dateEndTf;
    private javax.swing.JTextField dateStartTf;
    private javax.swing.JTextField gameTf;
    private javax.swing.JPanel infoPnl;
    private javax.swing.JPanel infoPnl1;
    private javax.swing.JLabel l1Lbl;
    private javax.swing.JLabel l2Lbl;
    private javax.swing.JLabel l3Lbl;
    private javax.swing.JLabel l4Lbl;
    private javax.swing.JLabel l5Lbl;
    private javax.swing.JLabel l6Lbl;
    private javax.swing.JLabel l7Lbl;
    private javax.swing.JLabel l8Lbl;
    private javax.swing.JLabel l9Lbl;
    private javax.swing.JPanel leagueChooserPnl;
    private javax.swing.JComboBox<String> leaguesCb;
    private javax.swing.JPanel mainPnl;
    private javax.swing.JLabel matchDateLbl;
    private javax.swing.JTextField matchDateTf;
    private javax.swing.JTextField matchLinkTf;
    private javax.swing.JLabel matchResultLbl;
    private javax.swing.JTextField matchResultTf;
    private javax.swing.JLabel matchTypeLbl;
    private javax.swing.JLabel matchTypeLbl1;
    private javax.swing.JTextField matchTypeTf;
    private javax.swing.JLabel matchWinnerLbl;
    private javax.swing.JTextField matchWinnerTf;
    private javax.swing.JScrollPane matchesScroll;
    private javax.swing.JTable matchesTbl;
    private javax.swing.JTextField maxTeamsTf;
    private javax.swing.JTextField nameTf;
    private javax.swing.JRadioButton newMatchRb;
    private javax.swing.JButton resultsBtn;
    private javax.swing.JRadioButton resultsRb;
    private javax.swing.JButton selectLeagueBtn;
    private javax.swing.JTextField teamsInMatchTf;
    private javax.swing.JScrollPane teamsScroll;
    private javax.swing.JTable teamsTbl;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables
    
    private void updateAll(){
        nameTf.setText(selectedLeague.getName());
        gameTf.setText(selectedLeague.getGame());
        currentTeamsTf.setText(Integer.toString(selectedLeague.getCurrentTeamsInLeague()));
        maxTeamsTf.setText(Integer.toString(selectedLeague.getMaxNumberTeams()));
        teamsInMatchTf.setText(Integer.toString(selectedLeague.getNumberOfTeamsInMatch()));
        dateStartTf.setText(selectedLeague.getStartDateString());
        dateEndTf.setText(selectedLeague.getEndDateString());
        
        populateTeamsTbl();
        populateMatchTbl();
        
        newMatchRb.setSelected(true);
        newMatchAction();
        
    }
    
    private void createMatchAction() {
        int inMatch = selectedLeague.getNumberOfTeamsInMatch();
        
        ArrayList<Team> teamsInMatch = new ArrayList<>();
        
        DefaultTableModel modelTeams = (DefaultTableModel) teamsTbl.getModel();
        for (int i = 0; i < modelTeams.getRowCount(); i++) {
            boolean selection = (boolean) modelTeams.getValueAt(i, 1);
            if (selection) {
                teamsInMatch.add(selectedLeagueTeams.get(i));
            }
        }
        
        if (teamsInMatch.size() != inMatch) {
            errorMessage("Nie je zvolený správny počet tímov pre vytvorenie zápasu!\nZvoľte "+ inMatch + " tímy!");
            return;
        }
        
        String dateString = matchDateTf.getText();
        String typeString = matchTypeTf.getText();
        String linkString = matchLinkTf.getText();
        Date date = null;
        
        try {
            date = InputProcessor.convertDate(dateString);
        } catch (ParseException ex) {
            errorMessage("Nie je zadaný správny formát dátumu!");
            return;
        }
        
        if (!selectedLeague.isBetween(date)) {
            errorMessage("Nie je zadaný platný dátumu!\nDátum musí byť medzi začiatkom a koncom ligy.");
            return;
        }
        
        if (typeString.isEmpty()) {
            errorMessage("Typ zápasu musí byť vyplnený!");
            return;
        }
        
        if (linkString.isEmpty()) {
            errorMessage("Link na zápas musí byť vyplnený!");
            return;
        }
        
        Match match = new Match(date, typeString, teamsInMatch, linkString);
        selectedLeague.addMatch(match);
        
        updateAll();
        
    }
    
    private void resultsBtnAction() {
        int matchTableIndex = getRow(matchesTbl, "Nie je vybraný žiaden zápas z tabuľky!");
        if (matchTableIndex == -1) {
            return;
        }
        
        Match match = selectedLeague.getMatchList().get(matchTableIndex);
        
        String winnerString = matchWinnerTf.getText();
        String resultString = matchResultTf.getText();
        
        if (winnerString.isEmpty() || resultString.isEmpty()) {
            errorMessage("Víťaz aj výsledok musia byť vyplnené!");
            return;
        }
        
        match.setWinner(winnerString);
        match.setResult(resultString);
        
        updateAll();
    }
    
    private void selectLeagueAction() {
        String atribute = "";

        if (leaguesCb.getSelectedItem() != null) {
            atribute = String.valueOf(leaguesCb.getSelectedItem());
        }

        if (atribute.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane,
                    "Výber ligy nemôže byť prázdny!",
                    "Chyba!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int index = organizersLeaguesStrings.indexOf(atribute);
        
        if (!(index >= 0)) {
            return;
        }
        
        selectedLeague = organizersLeagues.get(index);
        selectedLeagueTeams = selectedLeague.getTeamList();
        
        newMatchRb.setEnabled(true);
        resultsRb.setEnabled(true);
        
        updateAll();
    }
    
    private void deleteRows(DefaultTableModel model) {
        if (model.getRowCount() > 0) {
            for (int i = model.getRowCount() - 1; i > -1; i--) {
                model.removeRow(i);
            }
        }
    }

    private void populateTeamsTbl() {
        DefaultTableModel model = (DefaultTableModel) teamsTbl.getModel();
        deleteRows(model);

        int numberOfColumns = teamsTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        
        for (Team selectedLeagueTeam : selectedLeagueTeams) {
            rowData[0] = selectedLeagueTeam.getName();
            rowData[1] = false;
            model.addRow(rowData);
        }
    }
    
    private void populateMatchTbl(){
        DefaultTableModel model = (DefaultTableModel) matchesTbl.getModel();
        deleteRows(model);

        int numberOfColumns = matchesTbl.getColumnCount();
        Object[] rowData = new Object[numberOfColumns];
        ArrayList<Match> matches = selectedLeague.getMatchList();
        
        for (Match match : matches) {
            rowData[0] = match.getDateString();
            rowData[1] = match.getType();
            rowData[2] = match.getTeamsListString();
            rowData[3] = match.getWinner();
            rowData[4] = match.getResult();
            model.addRow(rowData);
        }
        
    }

    private void newMatchAction() {
        
        matchDateTf.setText("");
        matchTypeTf.setText("");
        matchLinkTf.setText("");
        matchWinnerTf.setText("---");
        matchResultTf.setText("---");
        
        matchDateTf.setEditable(true);
        matchTypeTf.setEditable(true);
        matchLinkTf.setEditable(true);
        matchWinnerTf.setEditable(false);
        matchResultTf.setEditable(false);
        
        createMatchBtn.setVisible(true);
        resultsBtn.setVisible(false);
    }

    private void resultsAction() {
        matchDateTf.setText("---");
        matchTypeTf.setText("---");
        matchLinkTf.setText("---");
        matchWinnerTf.setText("");
        matchResultTf.setText("");

        matchDateTf.setEditable(false);
        matchTypeTf.setEditable(false);
        matchLinkTf.setEditable(false);
        matchWinnerTf.setEditable(true);
        matchResultTf.setEditable(true);
        
        createMatchBtn.setVisible(false);
        resultsBtn.setVisible(true);
    }
    
    private void errorMessage(String message) {
        JOptionPane.showMessageDialog(rootPane, message,
                "Chyba!", JOptionPane.ERROR_MESSAGE);
    }
    
    private int getRow(JTable table, String message) {
        int index = table.getSelectedRow();

        if (index >= 0) {
            return index;
        } else {
            errorMessage(message);
        }
        return -1;
    }
}
